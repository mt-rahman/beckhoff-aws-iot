<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Get_Data" Id="{4915af13-8898-4876-ac87-d399fc3c78ec}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Get_Data
VAR
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#1000S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#1000S);
	fbSqlCommand2	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#1000S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#1000S); 
    aReadStruct		: ARRAY[1..50] OF ST_SelectStructData;
	nState			: INT;
	sCmd			: STRING(20000);
	sCmd2			: STRING(20000);
	
	count			: ULINT;
	Data_Length		: ULINT;
	datetime		: STRING;
	Done			: BOOL;
	Deleted			: BOOL := TRUE;
	i 				: ULINT;
	
	TimeStr				: ARRAY[1..50] OF STRING;	
	Trailer_ID_Lead		: ARRAY[1..50] OF STRING;
	Trailer_ID_Rear		: ARRAY[1..50] OF STRING;
	Lat					: ARRAY[1..50] OF STRING;
	Lon					: ARRAY[1..50] OF STRING;
	Speed				: ARRAY[1..50] OF STRING;
	Overspeed			: ARRAY[1..50] OF STRING;
	Payload_Lead		: ARRAY[1..50] OF STRING;
	Payload_Rear		: ARRAY[1..50] OF STRING;
	Overload_Lead		: ARRAY[1..50] OF STRING;
	Overload_Rear		: ARRAY[1..50] OF STRING;
	Pressure_Lead		: ARRAY[1..50] OF STRING;
	Pressure_Rear		: ARRAY[1..50] OF STRING;
	Overpressure_Lead	: ARRAY[1..50] OF STRING;
	Overpressure_Rear	: ARRAY[1..50] OF STRING;
	EventCode			: ARRAY[1..50] OF STRING;
	
	Dbid			: UDINT;
	Switch			: BOOL;
	Pragma_Done		: BOOL;
	bDisconnect		: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* get new data only if prev data sent to aws & saved to localdb *)
IF Main_Send.Saved THEN
	Done	:= FALSE;
	Deleted	:= FALSE;
	IF fbSqlDatabase.bConnected THEN
		nState 	:= 1;
	ELSE
		nState 	:= 0;
	END_IF
END_IF

IF Switch THEN
	IF Buffer_Data.Dbid = Dbid AND Buffer_Data.fbSqlDatabase.bConnected THEN
		Switch := FALSE;
	END_IF
	
ELSIF Buffer_Data.Initialized AND Buffer_Data.fbSqlDatabase.bConnected THEN
	
	CASE nState OF
		
		0:
			//choose db opposite of buffer
			IF Buffer_Data.Dbid = 1 THEN
				Dbid := 6;
			ELSE
				Dbid := 1;
			END_IF
			
			IF fbSqlDatabase.Connect(Dbid) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255;
				ELSE
					nState := nState + 1;
				END_IF
			END_IF
			
		1:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		2:	(* execute pragmas *)
			IF NOT Pragma_Done THEN
				sCmd	:= 'PRAGMA journal_mode = WAL; PRAGMA synchronous = NORMAL; PRAGMA temp_store = MEMORY; PRAGMA mmap_size = 30000000000; PRAGMA page_size = 32768; PRAGMA locking_mode = EXCLUSIVE;';
			
				IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
					IF fbSQLCommand.bError THEN
						nState := 255; 
					ELSE
						nState 		:= nState+1; 
						Pragma_Done := TRUE;
					END_IF
				END_IF
			
			ELSE
				nState 		:= nState+1;
			END_IF
		
		3:	
			IF Deleted THEN
				nState := nState+1;
			ELSE
				(* delete saved data from buffer *)
				sCmd2	:= 'DELETE FROM buffer_data WHERE datetime IN (SELECT datetime FROM buffer_data ORDER BY datetime ASC LIMIT ';
				sCmd2	:= CONCAT(sCmd2, ULINT_TO_STRING(Data_Length));
				sCmd2	:= CONCAT(sCmd2, ');');
				
				IF fbSQLCommand.Execute(ADR(sCmd2), SIZEOF(sCmd2)) THEN
					IF fbSQLCommand.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1; 
						Deleted := TRUE;
					END_IF
				END_IF
			END_IF
			
		4:	
			(* count no of records in buffer *)
			sCmd2 := 'SELECT COUNT(*) FROM `buffer_data`';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		5:	
			IF fbSqlResult.Read(0, 1, ADR(count), SIZEOF(count), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		6:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState + 1;
				END_IF
				
			END_IF
			
		7:
			(* determine no of records to select *)
			IF count = 0 THEN
				Data_Length := 0;
				nState := 13;
			
			ELSIF count < 20 THEN
				Data_Length := count;
				nState := nState+1;
			
			ELSE
				Data_Length := 20;
				nState := nState+1;
			
			END_IF
			
		8:	
			(* get records from buffer *)
			sCmd2 := 'SELECT * FROM `buffer_data` ORDER BY datetime ASC LIMIT ';
			sCmd2 := CONCAT(sCmd2, ULINT_TO_STRING(Data_Length));
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		9:
			IF fbSqlResult.Read(0, ULINT_TO_UDINT(Data_Length), ADR(aReadStruct), SIZEOF(aReadStruct), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		10:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
		
		11:
			(* parse query result *)
			FOR i:=1 TO Data_Length BY 1 DO
				TimeStr[i] 					:= aReadStruct[i].datetime;
				Trailer_ID_Lead[i] 			:= LINT_TO_STRING(aReadStruct[i].trailer_id_lead);
				Trailer_ID_Rear[i] 			:= LINT_TO_STRING(aReadStruct[i].trailer_id_rear);
				Lat[i] 						:= REAL_TO_STRING(aReadStruct[i].latitude);
				Lon[i] 						:= REAL_TO_STRING(aReadStruct[i].longitude);
				Speed[i] 					:= REAL_TO_STRING(aReadStruct[i].speed);
				Overspeed[i] 				:= LINT_TO_STRING(aReadStruct[i].overspeed);
				Payload_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].payload_lead);
				Payload_Rear[i] 			:= REAL_TO_STRING(aReadStruct[i].payload_rear);
				Overload_Lead[i] 			:= LINT_TO_STRING(aReadStruct[i].overload_lead);
				Overload_Rear[i] 			:= LINT_TO_STRING(aReadStruct[i].overload_rear);
				Pressure_Lead[i] 			:= REAL_TO_STRING(aReadStruct[i].pressure_lead);
				Pressure_Rear[i] 			:= REAL_TO_STRING(aReadStruct[i].pressure_rear);
				Overpressure_Lead[i] 		:= REAL_TO_STRING(aReadStruct[i].overpressure_lead);
				Overpressure_Rear[i] 		:= REAL_TO_STRING(aReadStruct[i].overpressure_rear);
				EventCode[i]	 			:= REAL_TO_STRING(aReadStruct[i].event_code);
				
			END_FOR
			
			nState	:= nState + 1;
			
		12:
			Done	:= TRUE;
			
		13:	(* execute pragma optimize *)
			sCmd	:= 'PRAGMA optimize;';
			
			IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		14:
			//disconnect from db
			IF bDisconnect := fbSqlDatabase.Disconnect() THEN
				IF fbSqlDatabase.bError THEN
					nState := 255;
				ELSE
					nState 		:= 0;
					Switch 		:= TRUE;
					Pragma_Done	:= FALSE;
				END_IF
			END_IF			
		
		255:
			nState	:= 0;	
			
	END_CASE
	
END_IF


]]></ST>
    </Implementation>
    <LineIds Name="Get_Data">
      <LineId Id="1109" Count="216" />
      <LineId Id="75" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>