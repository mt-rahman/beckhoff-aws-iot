<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Get_Data" Id="{4915af13-8898-4876-ac87-d399fc3c78ec}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Get_Data
VAR
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand2	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#5S); 
    aReadStruct		: ARRAY[1..20] OF ST_SelectStructData;
	nState			: INT;
	sCmd			: STRING(20000);
	sCmd2			: STRING(20000);
	val1			: INT;
	val2			: INT;
	exec			: BOOL;
	diff			: BOOL;
	rel				: BOOL;
	exec2			: BOOL;
	diff2			: BOOL;	
	rel2			: BOOL;
	exec3			: BOOL;
	diff3			: BOOL;	
	rel3			: BOOL;
	
	count			: LINT;
	Data_Length		: UDINT;
	datetime		: STRING;
	Done			: BOOL;
	i 				: UDINT;
	
	TimeStr			: ARRAY[1..20] OF STRING;	
	Trailer_ID		: ARRAY[1..20] OF STRING;
	Lat				: ARRAY[1..20] OF STRING;
	Lon				: ARRAY[1..20] OF STRING;
	Speed			: ARRAY[1..20] OF STRING;
	Overspeed		: ARRAY[1..20] OF STRING;
	Payload_EMA		: ARRAY[1..20] OF STRING;
	Payload_Raw		: ARRAY[1..20] OF STRING;
	Overload		: ARRAY[1..20] OF STRING;
	Pressure_Cyl	: ARRAY[1..20] OF STRING;
	Pressure_Val	: ARRAY[1..20] OF STRING;
	Strain_Left		: ARRAY[1..20] OF STRING;
	Strain_Right	: ARRAY[1..20] OF STRING;
	EventCode		: ARRAY[1..20] OF STRING;
	Cycle_Duration	: ARRAY[1..20] OF STRING;
	Hyd_Efficiency	: ARRAY[1..20] OF STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* get new data only if prev data sent to aws & saved to localdb *)
IF Main_SendData.Saved THEN
	nState 	:= 0;
	Done	:= FALSE;
END_IF

(* connect to localdb *)
IF NOT fbSqlDatabase.bConnected THEN
	fbSqlDatabase.Connect(1);
ELSE

	CASE nState OF
		
		0:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		1:	(* count no of records in buffer *)
			sCmd2 := 'SELECT COUNT(*) FROM `buffer_data`';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		2:	
			IF fbSqlResult.Read(0, 1, ADR(count), SIZEOF(count), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		3:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					
					(* determine no of records to select *)
					IF count >= 10 THEN
						Data_Length := 10;
						nState := nState+1;
						
					ELSE
						Data_Length := 0;
						nState := 1;
						
					END_IF
					
				END_IF
				
			END_IF
			
		4:	(* get records from buffer *)
			sCmd2 := 'SELECT * FROM `buffer_data` ORDER BY datetime ASC LIMIT ';
			sCmd2 := CONCAT(sCmd2, UDINT_TO_STRING(Data_Length));
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		5:
			IF fbSqlResult.Read(0, Data_Length, ADR(aReadStruct), SIZEOF(aReadStruct), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		6:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
		
		7:
			(* parse query result *)
			i := 1;
			WHILE (i <= Data_Length) DO
				TimeStr[i]			:= DT_TO_STRING(aReadStruct[i].TimeStr);
				TimeStr[i]			:= Delete(TimeStr[i], 3, 1);
				TimeStr[i]			:= Replace(TimeStr[i], 'T', 1, 11);
				TimeStr[i]			:= Insert(TimeStr[i], 'Z', 19);
				Trailer_ID[i]		:= UINT_TO_STRING(aReadStruct[i].Trailer_ID);
				Lat[i]				:= LREAL_TO_STRING(aReadStruct[i].Lat);
				Lon[i]				:= LREAL_TO_STRING(aReadStruct[i].Lon);
				Speed[i]			:= LREAL_TO_STRING(aReadStruct[i].Speed);
				Overspeed[i]		:= BOOL_TO_STRING(aReadStruct[i].Overspeed);
				Payload_EMA[i]		:= LREAL_TO_STRING(aReadStruct[i].Payload_EMA);
				Payload_Raw[i]		:= LREAL_TO_STRING(aReadStruct[i].Payload_Raw);
				Overload[i]			:= BOOL_TO_STRING(aReadStruct[i].Overload);
				Pressure_Cyl[i]		:= LREAL_TO_STRING(aReadStruct[i].Pressure_Cyl);
				Pressure_Val[i]		:= LREAL_TO_STRING(aReadStruct[i].Pressure_Val);
				Strain_Left[i]		:= LREAL_TO_STRING(aReadStruct[i].Strain_Left);
				Strain_Right[i]		:= LREAL_TO_STRING(aReadStruct[i].Strain_Right);
				EventCode[i]		:= UINT_TO_STRING(aReadStruct[i].EventCode);
				Cycle_Duration[i]	:= UDINT_TO_STRING(aReadStruct[i].Cycle_Duration);
				Hyd_Efficiency[i]	:= LREAL_TO_STRING(aReadStruct[i].Hyd_Efficiency);
				
				i := i+1;
				
			END_WHILE
			
			nState	:= nState + 1;
			
		8:
			Done	:= TRUE;
		
		255:
			nState	:= 0;	
			
	END_CASE

END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Get_Data">
      <LineId Id="341" Count="46" />
      <LineId Id="389" Count="1" />
      <LineId Id="512" Count="1" />
      <LineId Id="396" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="397" Count="1" />
      <LineId Id="563" Count="0" />
      <LineId Id="399" Count="3" />
      <LineId Id="561" Count="0" />
      <LineId Id="403" Count="31" />
      <LineId Id="445" Count="0" />
      <LineId Id="481" Count="1" />
      <LineId Id="484" Count="21" />
      <LineId Id="507" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="508" Count="2" />
      <LineId Id="480" Count="0" />
      <LineId Id="437" Count="7" />
      <LineId Id="75" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>