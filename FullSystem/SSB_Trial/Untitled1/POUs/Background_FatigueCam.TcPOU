<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Background_FatigueCam" Id="{9a20473f-0d3f-4584-b429-33e10587a848}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Background_FatigueCam
VAR
	(* ----------------- via db9 -------------------*)	
	(* I/O variables for a PC-COM port *)
    stIn_PcCom AT %I* : PcComInData; (* linked to the port in the TwinCAT System Manager *)
    stOut_PcCom AT %Q* : PcComOutData; (* linked to the port in the TwinCAT System Manager *)
    RxBuffer     : ComBuffer; (* Receive data buffer; used with all receive function blocks *)
    TxBuffer     : ComBuffer; (* Transmit data buffer; used with all receive function blocks *)
	
	(* background communication with the PC COM port device *)
    fbPcComCtrl       : SerialLineControl;
    bPcComCtrlError   : BOOL;
    ePcComCtrlErrorID : ComError_t;
	
	(* ----------------- via el6001 -------------------*)
	(* background communication with the EL6001 terminal *)
	(*
	RxBuffer	:ComBuffer;
	TxBuffer	:ComBuffer;
	
	fbEL6001Ctrl		: SerialLineControl;
	bEL6001CtrlError	: BOOL;
	eEL6001CtrlErrorID	: ComError_t;
	(* 	I/O variables for a EL6001 terminal*)
	stIn_EL6001 AT %I*	: EL6inData22B;	(* linked to the EL6001 in the TwinCAT System Manager *)
	stOut_EL6001 AT %Q*	: EL6outData22B;(* linked to the EL6001 in the TwinCAT System Manager *)
	*)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* ---------------------- via db9 ------------------ *)
(* background communication with the PC COM port device *)
fbPcComCtrl(
    Mode      := SERIALLINEMODE_PC_COM_PORT, 
    pComIn    := ADR(stIn_PcCom), 
    pComOut   := ADR(stOut_PcCom), 
    SizeComIn := SIZEOF(stIn_PcCom), 
    Error     => bPcComCtrlError, 
    ErrorID   => ePcComCtrlErrorID, 
    TxBuffer  := TxBuffer, 
    RxBuffer  := RxBuffer 
);

(* ---------------------- via el6001 ------------------ *)
(*
(*
The SerialLineControl function block is supposed to be called in every PLC cycle.
It communicates with the serial line hardware device and transmits or receives data.
The SerialLineControl can be called in the standard task (e.g.for PcCOM port usage) 
or in a separate fast task (e.g.for terminal usage) as well.
A fast separate task will be necessary at high baud rates or with KL6001 terminals 
which have a small process image (3 or 5 data bytes only)
*)

(* background communication with the EL6001 terminal *)
fbEL6001Ctrl(
	Mode:= SERIALLINEMODE_EL6_22B, 
	pComIn:= ADR(stIn_EL6001), 
	pComOut:= ADR(stOut_EL6001), 
	SizeComIn:= SIZEOF(stIn_EL6001), 
	Error=> , 
	ErrorID=> , 
	TxBuffer:= TxBuffer, 
	RxBuffer:= RxBuffer );
IF fbEL6001Ctrl.Error THEN
	bEL6001CtrlError := TRUE;
	eEL6001CtrlErrorID := fbEL6001Ctrl.ErrorID;
END_IF
*)]]></ST>
    </Implementation>
    <LineIds Name="Background_FatigueCam">
      <LineId Id="44" Count="0" />
      <LineId Id="222" Count="9" />
      <LineId Id="183" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="3" Count="21" />
      <LineId Id="2" Count="0" />
      <LineId Id="233" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>