<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Get_IMU" Id="{e29dc521-fa59-4daa-b2aa-3903a6229bc7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Get_IMU
VAR
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand2	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#5S); 
    aReadStruct		: ARRAY[1..1000] OF ST_SelectStructIMU;
	nState			: INT;
	sCmd			: STRING(20000);
	sCmd2			: STRING(20000);
	val1			: INT;
	val2			: INT;
	exec			: BOOL;
	diff			: BOOL;
	rel				: BOOL;
	exec2			: BOOL;
	diff2			: BOOL;	
	rel2			: BOOL;
	exec3			: BOOL;
	diff3			: BOOL;	
	rel3			: BOOL;
	
	count			: ULINT;
	Data_Length		: UDINT;
	datetime		: STRING;
	Done			: BOOL;
	i 				: UDINT;
	
	TimeStr			: ARRAY[1..1000] OF STRING;	
	Trailer_ID		: ARRAY[1..1000] OF STRING;
	RoadSec			: ARRAY[1..1000] OF STRING;
	AccX			: ARRAY[1..1000] OF STRING;
	AccY			: ARRAY[1..1000] OF STRING;
	AccZ			: ARRAY[1..1000] OF STRING;
	Pitch			: ARRAY[1..1000] OF STRING;
	Roll			: ARRAY[1..1000] OF STRING;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* get new data only if prev data sent to aws & saved to localdb *)
IF Main_SendIMU.Saved THEN
	nState 	:= 0;
	Done	:= FALSE;
END_IF

(* connect to localdb *)
IF NOT fbSqlDatabase.bConnected THEN
	fbSqlDatabase.Connect(1);
ELSE

	CASE nState OF
		
		0:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		1:	(* count no of records in buffer *)
			sCmd2 := 'SELECT COUNT(*) FROM `buffer_imu`';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		2:	
			IF fbSqlResult.Read(0, 1, ADR(count), SIZEOF(count), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		3:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
					
					(* determine no of records to select *)
					IF count = 0 THEN
						nState := 1;
						
					ELSIF count < 500 THEN
						Data_Length := 50;
						
					ELSIF count < 1000 THEN
						Data_Length := 500;
						
					ELSE
						Data_Length := 1000;
						
					END_IF
					
				END_IF
				
			END_IF
			
		4:	(* get records from buffer *)
			sCmd2 := 'SELECT * FROM `buffer_imu` ORDER BY datetime ASC LIMIT ';
			sCmd2 := CONCAT(sCmd2, ULINT_TO_STRING(Data_Length));
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		5:
			IF fbSqlResult.Read(0, Data_Length, ADR(aReadStruct), SIZEOF(aReadStruct), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		6:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
		
		7:
			(* parse query result *)
			i := 1;
			WHILE (i <= Data_Length) DO
				TimeStr[i]			:= DT_TO_STRING(aReadStruct[i].TimeStr);
				TimeStr[i]			:= Delete(TimeStr[i], 3, 1);
				TimeStr[i]			:= Replace(TimeStr[i], 'T', 1, 11);
				
				IF aReadStruct[i].Millis >= 100 THEN
					TimeStr[i]	:= Insert(TimeStr[i], '.Z', 19);
					TimeStr[i]	:= Insert(TimeStr[i], UINT_TO_STRING(aReadStruct[i].Millis), 20);
					
				ELSIF aReadStruct[i].Millis < 10 THEN
					TimeStr[i]	:= Insert(TimeStr[i], '.00Z', 19);
					TimeStr[i]	:= Insert(TimeStr[i], UINT_TO_STRING(aReadStruct[i].Millis), 22);
				
				ELSE
					TimeStr[i]	:= Insert(TimeStr[i], '.0Z', 19);
					TimeStr[i]	:= Insert(TimeStr[i], UINT_TO_STRING(aReadStruct[i].Millis), 21);
					
				END_IF
				
				Trailer_ID[i]		:= UINT_TO_STRING(aReadStruct[i].Trailer_ID);
				RoadSec[i]			:= UINT_TO_STRING(aReadStruct[i].RoadSec);
				AccX[i]				:= LREAL_TO_STRING(aReadStruct[i].AccX);
				AccY[i]				:= LREAL_TO_STRING(aReadStruct[i].AccY);
				AccZ[i]				:= LREAL_TO_STRING(aReadStruct[i].AccZ);
				Pitch[i]			:= LREAL_TO_STRING(aReadStruct[i].Pitch);
				Roll[i]				:= LREAL_TO_STRING(aReadStruct[i].Roll);
				
				i := i+1;
				
			END_WHILE
			
			nState	:= nState + 1;
			
		8:
			Done	:= TRUE;
		
		255:
			nState	:= 0;	
			
	END_CASE

END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Get_IMU">
      <LineId Id="185" Count="64" />
      <LineId Id="322" Count="0" />
      <LineId Id="250" Count="38" />
      <LineId Id="428" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="380" Count="1" />
      <LineId Id="383" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="290" Count="2" />
      <LineId Id="369" Count="3" />
      <LineId Id="304" Count="0" />
      <LineId Id="306" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>