<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Get_IMU" Id="{e29dc521-fa59-4daa-b2aa-3903a6229bc7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Get_IMU
VAR
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand2	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#5S); 
    aReadStruct		: ARRAY[1..2500] OF ST_SelectStructIMU;
	nState			: INT;
	sCmd			: STRING(20000);
	sCmd2			: STRING(20000);
	val1			: INT;
	val2			: INT;
	exec			: BOOL;
	diff			: BOOL;
	rel				: BOOL;
	exec2			: BOOL;
	diff2			: BOOL;	
	rel2			: BOOL;
	exec3			: BOOL;
	diff3			: BOOL;	
	rel3			: BOOL;
	
	count			: ULINT;
	Data_Length		: UDINT;
	datetime		: STRING;
	Done			: BOOL;
	Deleted			: BOOL := TRUE;
	i 				: UDINT;
	
	TimeStr			: ARRAY[1..2500] OF STRING;	
	Trailer_ID_Lead	: ARRAY[1..2500] OF STRING;
	Trailer_ID_Rear	: ARRAY[1..2500] OF STRING;
	Pitch_Lead		: ARRAY[1..2500] OF STRING;
	Roll_Lead		: ARRAY[1..2500] OF STRING;
	AccX_Lead		: ARRAY[1..2500] OF STRING;
	AccY_Lead		: ARRAY[1..2500] OF STRING;
	AccZ_Lead		: ARRAY[1..2500] OF STRING;
	Pitch_Rear		: ARRAY[1..2500] OF STRING;
	Roll_Rear		: ARRAY[1..2500] OF STRING;
	AccX_Rear		: ARRAY[1..2500] OF STRING;
	AccY_Rear		: ARRAY[1..2500] OF STRING;
	AccZ_Rear		: ARRAY[1..2500] OF STRING;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* get new data only if prev data sent to aws & saved to localdb *)
IF Main_SendIMU.Saved THEN
	nState 	:= 0;
	Done	:= FALSE;
	Deleted	:= FALSE;
END_IF

(* connect to localdb *)
IF NOT fbSqlDatabase.bConnected THEN
	fbSqlDatabase.Connect(2);
ELSE

	CASE nState OF
		
		0:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
		
		1:	
			
			IF Deleted THEN
				nState := nState+1;
			ELSE
				(* delete saved data from buffer *)
				sCmd2	:= 'DELETE FROM buffer_imu WHERE datetime IN (SELECT datetime FROM buffer_imu ORDER BY datetime ASC LIMIT ';
				sCmd2	:= CONCAT(sCmd2, UDINT_TO_STRING(Data_Length));
				sCmd2	:= CONCAT(sCmd2, ');');
				
				IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
					IF fbSQLCommand.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1; 
						Deleted := TRUE;
					END_IF
				END_IF
			END_IF
			
		2:	(* count no of records in buffer *)
			sCmd2 := 'SELECT COUNT(*) FROM `buffer_imu`';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		3:	
			IF fbSqlResult.Read(0, 1, ADR(count), SIZEOF(count), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		4:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
						
					(* determine no of records to select *)
					IF count = 0 THEN
						Data_Length := 0;
						nState := 1;
						
					ELSIF count < 250 THEN
						Data_Length := 50;
						nState := nState+1;
						
					ELSIF count < 500 THEN
						Data_Length := 250;
						nState := nState+1;
						
					ELSIF count < 750 THEN
						Data_Length := 500;
						nState := nState+1;
						
					ELSE
						Data_Length := 750;
						nState := nState+1;
	
					END_IF
					
				END_IF
				
			END_IF
			
		5:	(* get records from buffer *)
			sCmd2 := 'SELECT * FROM `buffer_imu` ORDER BY datetime ASC LIMIT ';
			sCmd2 := CONCAT(sCmd2, ULINT_TO_STRING(Data_Length));
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd2), SIZEOF(sCmd2), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		6:
			IF fbSqlResult.Read(0, Data_Length, ADR(aReadStruct), SIZEOF(aReadStruct), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		7:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
		
		8:
			(* parse query result *)
			FOR i:=1 TO Data_Length BY 1 DO
				TimeStr[i]			:= aReadStruct[i].datetime;
				
				Trailer_ID_Lead[i]			:= LINT_TO_STRING(aReadStruct[i].trailer_id_lead);
				Trailer_ID_Rear[i]			:= LINT_TO_STRING(aReadStruct[i].trailer_id_rear);
				//RoadSec[i]				:= UINT_TO_STRING(aReadStruct[i].RoadSec);
				Pitch_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].pitch_lead);
				Roll_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].roll_lead);
				AccX_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].ax_lead);
				AccY_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].ay_lead);
				AccZ_Lead[i]				:= REAL_TO_STRING(aReadStruct[i].az_lead);
				Pitch_Rear[i]				:= REAL_TO_STRING(aReadStruct[i].pitch_rear);
				Roll_Rear[i]				:= REAL_TO_STRING(aReadStruct[i].roll_rear);
				AccX_Rear[i]				:= REAL_TO_STRING(aReadStruct[i].ax_rear);
				AccY_Rear[i]				:= REAL_TO_STRING(aReadStruct[i].ay_rear);
				AccZ_Rear[i]				:= REAL_TO_STRING(aReadStruct[i].az_rear);
				
			END_FOR
			
			nState	:= nState + 1;
			
		9:
			Done	:= TRUE;
		
		255:
			nState	:= 0;	
			
	END_CASE

END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Get_IMU">
      <LineId Id="509" Count="3" />
      <LineId Id="781" Count="0" />
      <LineId Id="513" Count="17" />
      <LineId Id="784" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="795" Count="1" />
      <LineId Id="798" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="810" Count="1" />
      <LineId Id="802" Count="6" />
      <LineId Id="812" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="799" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="531" Count="26" />
      <LineId Id="716" Count="10" />
      <LineId Id="860" Count="0" />
      <LineId Id="728" Count="2" />
      <LineId Id="859" Count="0" />
      <LineId Id="732" Count="3" />
      <LineId Id="574" Count="38" />
      <LineId Id="614" Count="0" />
      <LineId Id="631" Count="1" />
      <LineId Id="664" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="665" Count="1" />
      <LineId Id="634" Count="2" />
      <LineId Id="668" Count="3" />
      <LineId Id="667" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="642" Count="11" />
      <LineId Id="320" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>