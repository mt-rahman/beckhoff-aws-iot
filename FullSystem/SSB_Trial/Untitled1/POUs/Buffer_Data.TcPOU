<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Buffer_Data" Id="{cc02954f-a949-4289-a7a3-7d2c4eb6e01e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Buffer_Data
VAR
	pSec		: WORD;
	diff		: BOOL;
	
	TimeStr				: STRING;
	Trailer_ID_Lead		: STRING;
	Trailer_ID_Rear		: STRING;
	Lat					: STRING;
	Lon					: STRING;
	Speed				: STRING;
	Overspeed			: STRING;
	Payload_Lead		: STRING;
	Payload_Rear		: STRING;
	Overload_Lead		: STRING;
	Overload_Rear		: STRING;
	Pressure_Lead		: STRING;
	Pressure_Rear		: STRING;
	Overpressure_Lead	: STRING;
	Overpressure_Rear	: STRING;
	EventCode			: STRING;
	
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#1000S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#1000S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#1000S); 
	sCmd			: STRING(10000);
	sCmd2			: STRING(10000);
	nState			: INT;
	nState_Switch	: INT;
	
	Buffer_Done		: BOOL;
	Done			: BOOL;
	Vacuumed		: BOOL := FALSE;
	
	Initialized 	: BOOL := FALSE;
	i				: INT;
	Pragma_Done		: BOOL;
	Counter			: ULINT;
	Dbid			: UDINT;
	bDisconnect		: BOOL;
	
	aReadStruct		: ST_SelectStructData;
	aReadStruct_2	: ST_SelectStructData;
	Timestamp		: DT;
	Timestamp_2		: DT; 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* convert to strings *)
IF GVL.Lead_Trailer_State = 8 OR GVL.Lead_Trailer_State = 17416 THEN
	Trailer_ID_Lead		:= UINT_TO_STRING(Read_ID.Trailer_ID_Lead);
	Payload_Lead		:= REAL_TO_STRING(Read_Payload.Payload_Lead);
	Overload_Lead		:= BOOL_TO_STRING(Read_Payload.Overload_Lead);
	Pressure_Lead		:= REAL_TO_STRING(Read_Pressure.Pressure_Lead);
	Overpressure_Lead	:= BOOL_TO_STRING(Read_Pressure.Overpressure_Lead);
ELSE
	Trailer_ID_Lead		:= '99';
	Payload_Lead		:= '0';
	Overload_Lead		:= 'FALSE';
	Pressure_Lead		:= '0';
	Overpressure_Lead	:= 'FALSE';	
END_IF

IF GVL.Rear_Trailer_State = 8 THEN
	Trailer_ID_Rear		:= UINT_TO_STRING(Read_ID.Trailer_ID_Rear);
	Payload_Rear		:= REAL_TO_STRING(Read_Payload.Payload_Rear);
	Overload_Rear		:= BOOL_TO_STRING(Read_Payload.Overload_Rear);
	Pressure_Rear		:= REAL_TO_STRING(Read_Pressure.Pressure_Rear);
	Overpressure_Rear	:= BOOL_TO_STRING(Read_Pressure.Overpressure_Rear);
ELSE
	Trailer_ID_Rear		:= '99';
	Payload_Rear		:= '0';
	Overload_Rear		:= 'FALSE';
	Pressure_Rear		:= '0';
	Overpressure_Rear	:= 'FALSE';
END_IF

TimeStr				:= Main_Read.TimeStr;
TimeStr				:= REPLACE(TimeStr, ' ', 1, 11);
Lat					:= REAL_TO_STRING(Read_GPS.Lat);
Lon					:= REAL_TO_STRING(Read_GPS.Lon);
Speed				:= REAL_TO_STRING(Read_GPS.Speed);
Overspeed			:= BOOL_TO_STRING(Read_GPS.Overspeed);

IF Read_FatigueCam.New_Event THEN
	Buffer_Done := FALSE;
END_IF

EventCode	:= Read_FatigueCam.EventCode;

IF NOT Initialized THEN
	
	//initialization (choose which database for buffer)
	CASE nState OF
		
		0:
			(* connect to buffer_data *)	
			IF Vacuum_Buffer_Data.Vacuumed THEN
				
				Dbid := 1;		
				IF fbSqlDatabase.Connect(Dbid) THEN
					IF fbSqlDatabase.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1;
					END_IF
				END_IF
				
			END_IF
			
			
		1:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		2:	(* execute pragmas *)
			sCmd	:= 'PRAGMA journal_mode = WAL; PRAGMA synchronous = NORMAL; PRAGMA temp_store = MEMORY; PRAGMA mmap_size = 30000000000; PRAGMA page_size = 32768; PRAGMA locking_mode = EXCLUSIVE;';
			
			IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		3:
			(* select oldest data from buffer_data *)
			sCmd	:= 'SELECT * FROM `buffer_data` ORDER BY datetime ASC LIMIT 1';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd), SIZEOF(sCmd), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		4:
			IF fbSqlResult.Read(0, 1, ADR(aReadStruct), SIZEOF(aReadStruct), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		5:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
			
		6:	(* execute pragma optimize *)
			sCmd	:= 'PRAGMA optimize;';
			
			IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		7:
			(* disconnect from buffer_data *)
			IF fbSqlDatabase.Disconnect() THEN
				IF fbSqlDatabase.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
			
		8:	
			(* connect to buffer_data_2 *)
			IF Vacuum_Buffer_Data_2.Vacuumed THEN
				
				Dbid := 6;	
				IF fbSqlDatabase.Connect(Dbid) THEN
					IF fbSqlDatabase.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1;
					END_IF
				END_IF
				
			END_IF	
			
		9:
			IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
				IF fbSqlDatabase.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		10:	(* execute pragmas *)
			sCmd	:= 'PRAGMA journal_mode = WAL; PRAGMA synchronous = NORMAL; PRAGMA temp_store = MEMORY; PRAGMA mmap_size = 30000000000; PRAGMA page_size = 32768; PRAGMA locking_mode = EXCLUSIVE;';
			
			IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		11:
			(* select oldest data from buffer_data *)
			sCmd	:= 'SELECT * FROM `buffer_data` ORDER BY datetime ASC LIMIT 1';
			
			IF fbSQLCommand.ExecuteDataReturn(ADR(sCmd), SIZEOF(sCmd), ADR(fbSqlResult)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		12:
			IF fbSqlResult.Read(0, 1, ADR(aReadStruct_2), SIZEOF(aReadStruct_2), TRUE, TRUE) THEN
				IF fbSqlResult.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		13:
			IF fbSqlResult.Release() THEN
				IF fbSqlResult.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
			
		14:	(* execute pragma optimize *)
			sCmd	:= 'PRAGMA optimize;';
			
			IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
				IF fbSQLCommand.bError THEN
					nState := 255; 
				ELSE
					nState := nState+1; 
				END_IF
			END_IF
			
		15:
			(* disconnect from buffer_data_2 *)
			IF bDisconnect := fbSqlDatabase.Disconnect() THEN
				IF fbSqlDatabase.bError THEN
					nState := 255;
				ELSE
					nState := nState+1;
				END_IF
			END_IF
			
		16:
			// compare oldest data datetime
			aReadStruct.datetime 	:= REPLACE(aReadStruct.datetime, '-', 1, 11);
			aReadStruct_2.datetime 	:= REPLACE(aReadStruct_2.datetime, '-', 1, 11);
			
			Timestamp	:= SYSTEMTIME_TO_DT(STRING_TO_SYSTEMTIME(aReadStruct.datetime));
			Timestamp_2	:= SYSTEMTIME_TO_DT(STRING_TO_SYSTEMTIME(aReadStruct_2.datetime));

			IF Timestamp = DT#1970-1-1-00:00:00 THEN
				Dbid := 1;
			ELSIF Timestamp_2 = DT#1970-1-1-00:00:00 THEN
				Dbid := 6;
			ELSIF Timestamp > Timestamp_2 THEN
				Dbid := 1;
			ELSE
				Dbid := 6;
			END_IF
			
			Initialized := TRUE;
			nState		:= 0;
			
		255:
			nState := 0;
		
	END_CASE
	
ELSE
	
	(* save data to buffer every second *)
	IF diff:= Background_Time.cSec <> pSec THEN
		
		//database switching
		IF Get_Data.Switch AND Counter >= 5 THEN
			
			CASE nState_Switch OF
				
				0:	(* execute pragma optimize *)
					sCmd	:= 'PRAGMA optimize;';
					
					IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
						IF fbSQLCommand.bError THEN
							nState_Switch := 255; 
						ELSE
							nState_Switch := nState_Switch+1; 
						END_IF
					END_IF
				
				1:
					IF fbSqlDatabase.bConnected THEN
						fbSqlDatabase.Disconnect();
					ELSE
						IF Dbid = 1 THEN
							Dbid := 6;
						ELSE
							Dbid := 1;
						END_IF
						Counter			:= 0;
						nState_Switch 	:= 0;
						Pragma_Done		:= FALSE;
					END_IF
					
				255:
					nState_Switch := 0;
					
			END_CASE
		
		ELSE
			
			IF Done THEN
				Done	:= FALSE;
				IF fbSqlDatabase.bConnected THEN
					nState 	:= 1;
				ELSE
					nState 	:= 0;
				END_IF	
			END_IF
			
			CASE nState OF	
				0:	
					IF fbSqlDatabase.Connect(Dbid) THEN
						IF fbSqlDatabase.bError THEN
							nState := 255;
						ELSE
							nState := nState + 1; 
						END_IF
					END_IF
				
				1:
					IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
						IF fbSqlDatabase.bError THEN
							nState := 255; 
						ELSE
							nState := nState+1; 
						END_IF
					END_IF
					
				2:	(* execute pragmas *)
					IF NOT Pragma_Done THEN
						sCmd	:= 'PRAGMA journal_mode = WAL; PRAGMA synchronous = NORMAL; PRAGMA temp_store = MEMORY; PRAGMA mmap_size = 30000000000; PRAGMA page_size = 32768; PRAGMA locking_mode = EXCLUSIVE;';
					
						IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
							IF fbSQLCommand.bError THEN
								nState := 255; 
							ELSE
								nState 		:= nState+1; 
								Pragma_Done := TRUE;
							END_IF
						END_IF
					
					ELSE
						nState 		:= nState+1;
 
					END_IF
					
				3:	
					(* build query *)	
					sCmd:= 'INSERT INTO buffer_data (datetime,trailer_id_lead,trailer_id_rear,latitude,longitude,speed,overspeed,payload_lead,payload_rear,overload_lead,overload_rear,pressure_lead,pressure_rear,overpressure_lead,overpressure_rear,event_code) VALUES ($'';
					sCmd2:= TimeStr;
					sCmd2:= CONCAT(sCmd2, '$',');
					sCmd2:= CONCAT(sCmd2, Trailer_ID_Lead);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Trailer_ID_Rear);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Lat);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Lon);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Speed);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Overspeed);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Payload_Lead);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Payload_Rear);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Overload_Lead);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Overload_Rear);
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Pressure_Lead); 
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Pressure_Rear); 
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Overpressure_Lead); 
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, Overpressure_Rear); 
					sCmd2:= CONCAT(sCmd2, ',');
					sCmd2:= CONCAT(sCmd2, EventCode);
					sCmd2:= CONCAT(sCmd2, ')');
					CONCAT2(ADR(sCmd), ADR(sCmd2), ADR(sCmd), SIZEOF(sCmd));
					
					IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
						IF fbSQLCommand.bError THEN
							nState := 255; 
						ELSE
							nState := nState+1; 
							pSec := Background_Time.cSec;
							
						END_IF
					END_IF
					
				4: 
					Counter := Counter + 1;
					Done	:= TRUE;
						
				255:
					nState := 0;
					
			END_CASE
			
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Buffer_Data">
      <LineId Id="722" Count="0" />
      <LineId Id="935" Count="1" />
      <LineId Id="938" Count="4" />
      <LineId Id="945" Count="3" />
      <LineId Id="944" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="954" Count="2" />
      <LineId Id="953" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="962" Count="0" />
      <LineId Id="959" Count="2" />
      <LineId Id="958" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="934" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="725" Count="3" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1020" Count="1" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1115" Count="194" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1110" Count="1" />
      <LineId Id="1316" Count="1" />
      <LineId Id="1319" Count="0" />
      <LineId Id="1406" Count="87" />
      <LineId Id="1555" Count="42" />
      <LineId Id="1541" Count="8" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1551" Count="2" />
      <LineId Id="1108" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>