<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Buffer_Data" Id="{cc02954f-a949-4289-a7a3-7d2c4eb6e01e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Buffer_Data
VAR
	pSec		: WORD;
	diff		: BOOL;
	
	TimeStr				: STRING;
	Trailer_ID			: STRING;
	Lat					: STRING;
	Lon					: STRING;
	Speed				: STRING;
	Overspeed			: STRING;
	Payload_EMA			: STRING;
	Payload_Raw			: STRING;
	Overload			: STRING;
	Pressure_Cyl		: STRING;
	Pressure_Val		: STRING;
	Strain_Left			: STRING;
	Strain_Right		: STRING;
	EventCode			: STRING;
	Cycle_Duration		: STRING;
	Hyd_Efficiency		: STRING;
	
	fbSqlDatabase	: FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#5S);
	fbSqlCommand	: FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSqlResult		: FB_SQLResultEvt(sNetID:='', tTimeout   := T#5S); 
	sCmd			: STRING(10000);
	sCmd2			: STRING(10000);
	nState			: INT;
	
	Done			: BOOL;
	 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* convert to strings *)
TimeStr			:= Main_Read.TimeStr;
Trailer_ID		:= UINT_TO_STRING(Read_ID.Trailer_ID);
Lat				:= REAL_TO_STRING(Read_GPS.Lat);
Lon				:= REAL_TO_STRING(Read_GPS.Lon);
Speed			:= REAL_TO_STRING(Read_GPS.Speed);
Overspeed		:= BOOL_TO_STRING(Read_GPS.Overspeed);
Payload_EMA		:= REAL_TO_STRING(Read_Payload.Payload_EMA);
Payload_Raw		:= REAL_TO_STRING(Read_Payload.Payload_Raw);
Overload		:= BOOL_TO_STRING(Read_Payload.Overload);
Pressure_Cyl	:= REAL_TO_STRING(Read_Pressure.Pressure_Cyl);
Pressure_Val	:= REAL_TO_STRING(Read_Pressure.Pressure_Val);
Strain_Left		:= REAL_TO_STRING(Read_Strain.Strain_Left);
Strain_Right	:= REAL_TO_STRING(Read_Strain.Strain_Right);
EventCode		:= Read_FatigueCam.EventCode;
Cycle_Duration	:= Read_GPS.Cycle_Duration;
Hyd_Efficiency	:= REAL_TO_STRING(Read_Pressure.Hyd_Efficiency);

(* save data to buffer every second *)
IF diff:= Background_Time.cSec <> pSec THEN

	IF Done THEN
		nState 	:= 0;
		Done	:= FALSE;	
	END_IF
	
	
	(* connect to localdb *)
	IF NOT fbSqlDatabase.bConnected THEN
		fbSqlDatabase.Connect(1);
	ELSE
	
		CASE nState OF
				
			0:
				IF fbSqlDatabase.CreateCmd(ADR(fbSqlCommand)) THEN
					IF fbSqlDatabase.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1; 
					END_IF
				END_IF
				
			1:	
				(* build query *)	
				sCmd:= 'INSERT INTO buffer_data (datetime,id_trailer,lat,lon,speed,overspeed,payload_raw,payload_ema,overload,pressure_cyl,pressure_valve,strain_left,strain_right,event_code,cycle_duration,hyd_efficiency) VALUES ($'';
				sCmd2:= TimeStr;
				sCmd2:= CONCAT(sCmd2, '$',');
				sCmd2:= CONCAT(sCmd2, Trailer_ID);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Lat);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Lon);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Speed);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Overspeed);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Payload_Raw);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Payload_EMA);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Overload);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Pressure_Cyl); //pressure cylinder
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Pressure_Val); //pressure valve
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Strain_Left); //strain left
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Strain_Right); //strain right
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, EventCode);
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Cycle_Duration); //cycle duration
				sCmd2:= CONCAT(sCmd2, ',');
				sCmd2:= CONCAT(sCmd2, Hyd_Efficiency); //hyd sys efficiency
				sCmd2:= CONCAT(sCmd2, ')');
				CONCAT2(ADR(sCmd), ADR(sCmd2), ADR(sCmd), SIZEOF(sCmd));
				
				IF fbSQLCommand.Execute(ADR(sCmd), SIZEOF(sCmd)) THEN
					IF fbSQLCommand.bError THEN
						nState := 255; 
					ELSE
						nState := nState+1; 
						pSec := Background_Time.cSec;
						
					END_IF
				END_IF
				
			2: 
				Done	:= TRUE;
					
			255:
				nState := 0;
	
		END_CASE
	
	END_IF

END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Buffer_Data">
      <LineId Id="722" Count="100" />
      <LineId Id="140" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>