<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Read_FatigueCam" Id="{aef089b1-c7c5-479f-8336-a7bf9b8b2785}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Read_FatigueCam
VAR
	fb_Receive		: FB_FatigueCam_Receive;
	fbSend			: SendData;
	bSendBusy		: BOOL;
	eSendErrorID	: ComError_t;
	nSendCounter	: UDINT;
	
	pSec	: WORD := 0;
	
	TimeStr		: STRING;
	Year		: USINT;
	Month		: USINT;
	bDate		: USINT;
	Hour		: USINT;
	Minute		: USINT;
	Second		: USINT;
	
	YearBin		: STRING;
	MonthBin	: STRING;
	bDateBin	: STRING;
	HourBin		: STRING;
	MinuteBin	: STRING;
	SecondBin	: STRING;
	
	BinStr		: ARRAY [1..4] OF STRING;
	TimeBin		: STRING;
	
	Synced		: BOOL;
	
	Command			: ULINT := 16#00;
	Sent_Command	: ULINT;
	Command_Sent	: BOOL;
	Response		: STRING := 'ABC';
	Prev_Response	: STRING;
	Response_Count	: INT;
	EventID			: STRING := '00';
	prevEventID		: STRING;
	EventCode		: STRING := '0';
	New_Event		: BOOL;
	
	Prefix		: WORD;
	LenPrefix	: BYTE;
	
	i	: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* receive response *)
Prefix		:= 16#AA;
LenPrefix	:= 1;	

fb_Receive(
	RxBuffer	:= Background_FatigueCam.RxBuffer,
	Command		:= Command,
	Prefix		:= Prefix,
	LenPrefix	:= LenPrefix,
	EventID		=> EventID,
	EventCode	=> EventCode,
	Response	=> Response,
);

IF Background_Time.cSec <> pSec THEN
	
	(* sync time every 1 minute *)
	(*
	IF pSec = 0 THEN 
		Synced := FALSE;
	END_IF
	
	IF Synced = FALSE THEN
		
		IF NOT Command_Sent AND Response <> LWORD_TO_HEXSTR(in := Sent_Command, iPrecision := 1, bLoCase := FALSE) THEN
			(* send sync command *)
			TimeStr		:= Background_Time.TimeStr; //get datetime
	
			Year		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 3));
			Month		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 6));
			bDate		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 9));
			Hour		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 12));
			Minute		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 15));
			Second		:= STRING_TO_USINT(MID(STR := TimeStr, LEN := 2, POS := 18));
			
			(* convert datetime to binary *)
			YearBin		:= BYTE_TO_BINSTR(in := Year, iPrecision := 6);
			MonthBin	:= BYTE_TO_BINSTR(in := Month, iPrecision := 4);
			bDateBin	:= BYTE_TO_BINSTR(in := bDate, iPrecision := 5);
			HourBin		:= BYTE_TO_BINSTR(in := Hour, iPrecision := 5);
			MinuteBin	:= BYTE_TO_BINSTR(in := Minute, iPrecision := 6);
			SecondBin	:= BYTE_TO_BINSTR(in := Second, iPrecision := 6);
			BinStr[4]	:= CONCAT(YearBin, MonthBin); 
			BinStr[4]	:= CONCAT(BinStr[4], bDateBin);
			BinStr[4]	:= CONCAT(BinStr[4], HourBin); 
			BinStr[4]	:= CONCAT(BinStr[4], MinuteBin);
			BinStr[4]	:= CONCAT(BinStr[4], SecondBin);
			
			(* separate bytes *)
			BinStr[1]	:= LEFT(STR := BinStr[4], SIZE := 8);
			BinStr[2]	:= MID(STR := BinStr[4], LEN := 8, POS := 9);
			BinStr[3]	:= MID(STR := BinStr[4], LEN := 8, POS := 17);
			BinStr[4]	:= RIGHT(STR := BinStr[4], SIZE := 8);
			
			(* build sync command *)
			TimeBin		:= CONCAT('2#', BinStr[4]);
			TimeBin		:= CONCAT(TimeBin, BinStr[3]);
			TimeBin		:= CONCAT(TimeBin, BinStr[2]);
			TimeBin		:= CONCAT(TimeBin, BinStr[1]);
			TimeBin		:= CONCAT(TimeBin, '10001101'); //8D
			TimeBin		:= CONCAT(TimeBin, '10101010'); //AA
			Command		:= STRING_TO_ULINT(TimeBin);
			
			Prefix := 16#8DAA;
			LenPrefix := 2;
			
			(* send command *)
			fbSend( 
				pSendData	:= ADR(Command),
				TXbuffer 	:= Background_FatigueCam.TxBuffer,
				Length 		:= SIZEOF(Command),
				Busy		=> bSendBusy,
				Error		=> 
			);
			IF fbSend.Error <> COMERROR_NOERROR THEN
				eSendErrorID := fbSend.Error;
			ELSE
				Command_Sent 	:= TRUE;
				Sent_Command 	:= Command;
				Response_Count	:= 0;
			END_IF

		ELSE
			Synced	:= TRUE;
			
		END_IF
		
		IF Command_Sent THEN
			(* receive response *)
			fb_Receive(
				RxBuffer	:= Background_FatigueCam.RxBuffer,
				Command		:= Command,
				Prefix		:= Prefix,
				LenPrefix	:= LenPrefix,
				EventID		=> EventID,
				EventCode	=> EventCode,
				Response	=> Response,
			);
			
			Response_Count := Response_Count + 1;
			
			IF Response <> Prev_Response THEN
				Prev_Response := Response;
				Command_Sent := FALSE;
			ELSIF Response_Count > 10 THEN
				Command_Sent := FALSE;			
			END_IF
		END_IF
		
		pSec 	:= Background_Time.cSec;
		
	ELSE
		(* fatigue cam request event *)
		Command		:= 16#000000008CAA;
		Prefix		:= 16#AA;
		LenPrefix	:= 1;	
		
		(* send command *)
		fbSend( 
			pSendData	:= ADR(Command),
			TXbuffer 	:= Background_FatigueCam.TxBuffer,
			Length 		:= SIZEOF(Command),
			Busy		=> bSendBusy,
			Error		=> 
		);
		IF fbSend.Error <> COMERROR_NOERROR THEN
			eSendErrorID := fbSend.Error;
		END_IF
		
		(* receive response *)
		fb_Receive(
			RxBuffer	:= Background_FatigueCam.RxBuffer,
			Command		:= Command,
			Prefix		:= Prefix,
			LenPrefix	:= LenPrefix,
			EventID		=> EventID,
			EventCode	=> EventCode,
			Response	=> Response,
		);
	
		pSec := Background_Time.cSec;
	
	END_IF
	*)
	
	IF EventCode = '' OR EventID = prevEventID THEN
		EventCode 	:= '0';
		i			:= 0;		
	ELSE
		i := i+1;
		IF i > 1 THEN
			prevEventID	:= EventID;
		END_IF		
	END_IF
	
	pSec := Background_Time.cSec;
	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Read_FatigueCam">
      <LineId Id="862" Count="11" />
      <LineId Id="860" Count="1" />
      <LineId Id="576" Count="2" />
      <LineId Id="770" Count="0" />
      <LineId Id="579" Count="124" />
      <LineId Id="769" Count="0" />
      <LineId Id="818" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="855" Count="0" />
      <LineId Id="849" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="856" Count="2" />
      <LineId Id="842" Count="0" />
      <LineId Id="839" Count="1" />
      <LineId Id="710" Count="0" />
      <LineId Id="455" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>