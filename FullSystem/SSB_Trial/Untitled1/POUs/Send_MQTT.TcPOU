<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Send_MQTT" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Send_MQTT
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* aws certificates *)
	rootCA		: STRING := 'C:\Users\Administrator\Downloads\AWSCert\AmazonRootCA1.pem';
	thingCert	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-certificate.pem.crt';
	privateKey	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-private.pem.key';
	
	(* broker settings *)
	endpoint	: STRING := 'a2o01t3xth0mr1-ats.iot.ap-southeast-1.amazonaws.com';
	port		: UINT := 8883;
	clientID	: STRING := 'sdt1';
	
	(* published message *)
	sTopicPub 	: STRING(255) := 'iot/smartproduct/mifa/sdt'; //message topic
	sPayloadPub : STRING(255);
	i			: UDINT;
	fbTimer : TON := (PT:=T#1S);
	
	(* topic subscription *)
	bSubscribed : BOOL;
	sTopicSub 	: STRING(255) := 'iot/smartproduct/mifa/sdt';
	
	(* received message *)	
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* TLS settings for AWS IoT connection *)
	fbMqttClient.stTLS.sCA 		:= rootCA; //root CA
    fbMqttClient.stTLS.sCert 	:= thingCert; //certificate of thing
    fbMqttClient.stTLS.sKeyFile := privateKey; //private key of thing
	
	(* Broker settings für AWS IoT *)
	fbMqttClient.sHostName:= endpoint; //broker endpoint
	fbMqttClient.nHostPort:= port; //default mqtt tls port
	fbMqttClient.sClientId:= clientID; //client id
	fbMqttClient.sTopicPrefix:= ''; 
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect); //connect to mqtt broker
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

(* get message from subscribed topic *)
IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
	END_IF
END_IF

IF fbMqttClient.bConnected THEN	
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery); //subscribe to topic
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
		
	(* message payload *)
	sPayloadPub	:= CONCAT('{"pmid":"', Main2.Truck_ID);
	sPayloadPub	:= CONCAT(sPayloadPub, '","trid":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Trailer_ID);
	sPayloadPub	:= CONCAT(sPayloadPub, '","datetime":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.TimeStr);
	sPayloadPub	:= CONCAT(sPayloadPub, '","lat":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Lat);
	sPayloadPub	:= CONCAT(sPayloadPub, '","lon":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Lon);
	sPayloadPub	:= CONCAT(sPayloadPub, '","spd":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Speed);
	sPayloadPub	:= CONCAT(sPayloadPub, '","ovrspd":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Overspeed);
	sPayloadPub	:= CONCAT(sPayloadPub, '","ftgevt":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.EventCode);
	sPayloadPub	:= CONCAT(sPayloadPub, '","pyldema":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Payload_EMA);
	sPayloadPub	:= CONCAT(sPayloadPub, '","pyldraw":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Payload_Raw);
	sPayloadPub	:= CONCAT(sPayloadPub, '","pyld":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Payload);
	sPayloadPub	:= CONCAT(sPayloadPub, '","ovrld":"');
	sPayloadPub	:= CONCAT(sPayloadPub, Main2.Overload);
	sPayloadPub	:= CONCAT(sPayloadPub, '"}');	
		
	(* publish message to subscribed topic *)
	fbMqttClient.Publish(	
		sTopic:= sTopicPub, 
		pPayload:= ADR(sPayloadPub), 
		nPayloadSize:= LEN2(ADR(sPayloadPub)), 
		eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
		bRetain:= FALSE, 
		bQueue:= FALSE 
	);
	IF fbMqttClient.bError THEN
		// add your error logging here			
		hrErrorOccurred := fbMqttClient.hrErrorCode;
	END_IF
	//END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Send_MQTT">
      <LineId Id="508" Count="15" />
      <LineId Id="525" Count="13" />
      <LineId Id="540" Count="1" />
      <LineId Id="543" Count="6" />
      <LineId Id="554" Count="2" />
      <LineId Id="643" Count="1" />
      <LineId Id="613" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="560" Count="4" />
      <LineId Id="686" Count="1" />
      <LineId Id="611" Count="1" />
      <LineId Id="646" Count="1" />
      <LineId Id="688" Count="5" />
      <LineId Id="565" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>