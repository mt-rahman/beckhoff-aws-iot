<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Send_Data" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Send_Data
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* aws certificates *)
	rootCA		: STRING := 'C:\Users\Administrator\Downloads\AWSCert\AmazonRootCA1.pem';
	thingCert	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-certificate.pem.crt';
	privateKey	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-private.pem.key';
	
	(* broker settings *)
	endpoint	: STRING := 'a2o01t3xth0mr1-ats.iot.ap-southeast-1.amazonaws.com';
	port		: UINT := 8883;
	clientID	: STRING := 'sdt1';
	
	(* published message *)
	sTopicPub 	: STRING(255) := 'iot/smartproduct/mifa/sdt'; //message topic
	sPayloadPub : STRING(10000);
	str			: STRING(10000);
	str2		: STRING(10000);
	i			: INT;
	fbTimer : TON := (PT:=T#1S);
	
	(* topic subscription *)
	bSubscribed : BOOL;
	sTopicSub 	: STRING(255) := 'iot/smartproduct/mifa/sdt';
	
	(* received message *)	
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
	Published		: BOOL;
	Publish			: BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Main2.New_Data THEN
	Publish		:= FALSE;
	Published 	:= FALSE;	
END_IF


IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* TLS settings for AWS IoT connection *)
	fbMqttClient.stTLS.sCA 		:= rootCA; //root CA
    fbMqttClient.stTLS.sCert 	:= thingCert; //certificate of thing
    fbMqttClient.stTLS.sKeyFile := privateKey; //private key of thing
	
	(* Broker settings für AWS IoT *)
	fbMqttClient.sHostName:= endpoint; //broker endpoint
	fbMqttClient.nHostPort:= port; //default mqtt tls port
	fbMqttClient.sClientId:= clientID; //client id
	fbMqttClient.sTopicPrefix:= ''; 
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect); //connect to mqtt broker
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

(* get message from subscribed topic *)
IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
	END_IF
END_IF

IF fbMqttClient.bConnected THEN	
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery); //subscribe to topic
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	(* build message payload *)
	i := 1;
	sPayloadPub := '[';
	WHILE i <= Main2.Data_Length DO
		str	:= CONCAT('{"primemover_id":"', Main2.Truck_ID);
		str	:= CONCAT(str, '","trailer_id":"');
		str	:= CONCAT(str, Main2.Trailer_ID[i]);
		str	:= CONCAT(str, '","datetime":"');
		str	:= CONCAT(str, Main2.TimeStr[i]);
		str	:= CONCAT(str, '","latitude":"');
		str	:= CONCAT(str, Main2.Lat[i]);
		str	:= CONCAT(str, '","longitude":"');
		str	:= CONCAT(str, Main2.Lon[i]);
		str	:= CONCAT(str, '","speed":"');
		str	:= CONCAT(str, Main2.Speed[i]);
		str	:= CONCAT(str, '","overspeed":"');
		str	:= CONCAT(str, Main2.Overspeed[i]);
		str	:= CONCAT(str, '","payload_raw":"');
		str	:= CONCAT(str, Main2.Payload_Raw[i]);
		str	:= CONCAT(str, '","payload_ema":"');
		str	:= CONCAT(str, Main2.Payload_EMA[i]);
		
		str2	:= CONCAT('","overload":"', Main2.Overload[i]);
		str2	:= CONCAT(str2, '","pressure_cyl":"');
		str2	:= CONCAT(str2, Main2.Pressure_Cyl[i]);
		str2	:= CONCAT(str2, '","pressure_val":"');
		str2	:= CONCAT(str2, Main2.Pressure_Val[i]);
		str2	:= CONCAT(str2, '","strain_left":"');
		str2	:= CONCAT(str2, Main2.Strain_Left[i]);
		str2	:= CONCAT(str2, '","strain_right":"');
		str2	:= CONCAT(str2, Main2.Strain_Right[i]);
		str2	:= CONCAT(str2, '","fatigue_event":"');
		str2	:= CONCAT(str2, Main2.EventCode[i]);
		str2	:= CONCAT(str2, '","cycle_duration":"');
		str2	:= CONCAT(str2, Main2.Cycle_Duration[i]);
		str2	:= CONCAT(str2, '","hyd_efficiency":"');
		str2	:= CONCAT(str2, Main2.Hyd_Efficiency[i]);
		str2	:= CONCAT(str2, '"}');
		
		IF i <> Main2.Data_Length THEN
			str2	:= CONCAT(str2, ',');
		ELSE
			str2	:= CONCAT(str2, ']');
		END_IF
		
		CONCAT2(ADR(str), ADR(str2), ADR(str), SIZEOF(str));
		CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
		i := i+1;
	END_WHILE
	
	(* publish message to subscribed topic *)
	IF Publish := fbMqttClient.Publish(sTopic:= sTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE) THEN
		IF fbMqttClient.bError THEN
			// add your error logging here			
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		ELSE
			Published 	:= TRUE;
		END_IF
	END_IF
	
	//END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Send_Data">
      <LineId Id="914" Count="1" />
      <LineId Id="917" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="508" Count="15" />
      <LineId Id="525" Count="13" />
      <LineId Id="540" Count="1" />
      <LineId Id="543" Count="6" />
      <LineId Id="866" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="736" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="643" Count="1" />
      <LineId Id="613" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="560" Count="4" />
      <LineId Id="686" Count="1" />
      <LineId Id="748" Count="1" />
      <LineId Id="646" Count="1" />
      <LineId Id="764" Count="0" />
      <LineId Id="742" Count="0" />
      <LineId Id="750" Count="7" />
      <LineId Id="741" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="758" Count="3" />
      <LineId Id="565" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="744" Count="1" />
      <LineId Id="861" Count="1" />
      <LineId Id="746" Count="1" />
      <LineId Id="767" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="737" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="813" Count="2" />
      <LineId Id="912" Count="1" />
      <LineId Id="811" Count="1" />
      <LineId Id="579" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>