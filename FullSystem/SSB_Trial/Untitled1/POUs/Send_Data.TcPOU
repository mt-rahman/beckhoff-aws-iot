<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Send_Data" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Send_Data
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* aws certificates *)
	rootCA		: STRING := 'C:\Users\Administrator\Downloads\AWSCert\AmazonRootCA1.pem';
	thingCert	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-certificate.pem.crt';
	privateKey	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-private.pem.key';
	
	(* broker settings *)
	endpoint	: STRING := 'a2o01t3xth0mr1-ats.iot.ap-southeast-1.amazonaws.com';
	port		: UINT := 8883;
	clientID	: STRING := 'sdt1';
	
	(* published message *)
	sTopicPub 	: STRING(255) := 'iot/smartproduct/mifa/doublesdt/data'; //message topic
	sPayloadPub 	: STRING(200000);
	str				: STRING(100000);
	valSeparator	: STRING := '","';
	comma			: STRING := ',';
	arrayEnd		: STRING := '"]';
	arrayEnd2		: STRING := ']';
	msgEnd			: STRING := '}';
	i				: UDINT;
	
	(* topic subscription *)
	bSubscribed : BOOL;
	sTopicSub 	: STRING(255) := 'iot/smartproduct/mifa/doublesdt/data';
	
	(* received message *)	
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
	Published		: BOOL;
	Publish			: BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Main_SendData.New_Data THEN
	Publish		:= FALSE;
	Published 	:= FALSE;	
END_IF


IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* TLS settings for AWS IoT connection *)
	fbMqttClient.stTLS.sCA 		:= rootCA; //root CA
    fbMqttClient.stTLS.sCert 	:= thingCert; //certificate of thing
    fbMqttClient.stTLS.sKeyFile := privateKey; //private key of thing
	
	(* Broker settings für AWS IoT *)
	fbMqttClient.sHostName:= endpoint; //broker endpoint
	fbMqttClient.nHostPort:= port; //default mqtt tls port
	fbMqttClient.sClientId:= clientID; //client id
	fbMqttClient.sTopicPrefix:= ''; 
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

(* connect to mqtt broker *)
fbMqttClient.Execute(bConnect); 
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

IF fbMqttClient.bConnected THEN	
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery); //subscribe to topic
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	(* build message payload *)
	sPayloadPub := CONCAT('{"primemover_id":', Read_ID.PrimeMover_ID);
	
	(* lead trailer id string *)
	str	:= ',"trailer_id_lead":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Trailer_ID_Lead[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* rear trailer id string *)
	str	:= ',"trailer_id_rear":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Trailer_ID_Rear[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* date time string *)
	str	:= ',"datetime":["';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.TimeStr[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* latitude string *)
	str	:= ',"latitude":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Lat[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* longitude string *)
	str	:= ',"longitude":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Lon[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* speed string *)
	str	:= ',"speed":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Speed[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overspeed string *)
	str	:= ',"overspeed":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Overspeed[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* payload lead string *)
	str	:= ',"payload_lead":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Payload_Lead[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* payload rear string *)
	str	:= ',"payload_rear":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Payload_Rear[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overload lead string *)
	str	:= ',"overload_lead":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Overload_Lead[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overload rear string *)
	str	:= ',"overload_rear":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Overload_Rear[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* pressure lead string *)
	str	:= ',"pressure_lead":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Pressure_Lead[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));

	(* pressure rear string *)
	str	:= ',"pressure_rear":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Pressure_Rear[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overpressure lead string *)
	str	:= ',"overpressure_lead":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Overpressure_Lead[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overpressure rear string *)
	str	:= ',"overpressure_rear":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.Overpressure_Rear[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* event code string *)
	str	:= ',"event_code":[';
	FOR i:=1 TO Get_Data.Data_Length BY 1 DO
		CONCAT2(ADR(str), ADR(Get_Data.EventCode[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(comma), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd2), ADR(str), SIZEOF(str));
		END_IF
		
	END_FOR
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	CONCAT2(ADR(sPayloadPub), ADR(msgEnd), ADR(sPayloadPub), SIZEOF(sPayloadPub)); //message ending
	
	(* publish message to subscribed topic *)
	IF Publish := fbMqttClient.Publish(sTopic:= sTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE) THEN
		IF fbMqttClient.bError THEN
			// add your error logging here			
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		ELSE
			Published 	:= TRUE;
		END_IF
		
	END_IF
	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Send_Data">
      <LineId Id="1442" Count="55" />
      <LineId Id="1812" Count="0" />
      <LineId Id="1814" Count="12" />
      <LineId Id="1813" Count="0" />
      <LineId Id="1498" Count="119" />
      <LineId Id="1827" Count="0" />
      <LineId Id="1829" Count="12" />
      <LineId Id="1828" Count="0" />
      <LineId Id="1618" Count="29" />
      <LineId Id="1663" Count="30" />
      <LineId Id="1843" Count="12" />
      <LineId Id="1842" Count="0" />
      <LineId Id="1798" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>