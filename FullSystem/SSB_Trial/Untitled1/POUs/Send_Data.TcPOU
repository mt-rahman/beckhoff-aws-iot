<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Send_Data" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Send_Data
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* aws certificates *)
	rootCA		: STRING := 'C:\Users\Administrator\Downloads\AWSCert\AmazonRootCA1.pem';
	thingCert	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-certificate.pem.crt';
	privateKey	: STRING := 'C:\Users\Administrator\Downloads\AWSCert\6c62b288c2-private.pem.key';
	
	(* broker settings *)
	endpoint	: STRING := 'a2o01t3xth0mr1-ats.iot.ap-southeast-1.amazonaws.com';
	port		: UINT := 8883;
	clientID	: STRING := 'sdt1';
	
	(* published message *)
	sTopicPub 	: STRING(255) := 'iot/smartproduct/mifa/sdt/data'; //message topic
	sPayloadPub 	: STRING(200000);
	str				: STRING(100000);
	valSeparator	: STRING := '","';
	arrayEnd		: STRING := '"]';
	msgEnd			: STRING := '}';
	i				: UINT;
	
	(* topic subscription *)
	bSubscribed : BOOL;
	sTopicSub 	: STRING(255) := 'iot/smartproduct/mifa/sdt/data';
	
	(* received message *)	
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
	Published		: BOOL;
	Publish			: BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Main_SendData.New_Data THEN
	Publish		:= FALSE;
	Published 	:= FALSE;	
END_IF


IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* TLS settings for AWS IoT connection *)
	fbMqttClient.stTLS.sCA 		:= rootCA; //root CA
    fbMqttClient.stTLS.sCert 	:= thingCert; //certificate of thing
    fbMqttClient.stTLS.sKeyFile := privateKey; //private key of thing
	
	(* Broker settings für AWS IoT *)
	fbMqttClient.sHostName:= endpoint; //broker endpoint
	fbMqttClient.nHostPort:= port; //default mqtt tls port
	fbMqttClient.sClientId:= clientID; //client id
	fbMqttClient.sTopicPrefix:= ''; 
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

(* connect to mqtt broker *)
fbMqttClient.Execute(bConnect); 
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

(* get message from subscribed topic *)
IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
	END_IF
END_IF

IF fbMqttClient.bConnected THEN	
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery); //subscribe to topic
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	(* build message payload *)
	sPayloadPub := CONCAT('{"primemover_id":"', Read_ID.PrimeMover_ID);
	sPayloadPub := CONCAT(sPayloadPub, '"');
	
	(* trailer id string *)
	str	:= ',"trailer_id":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Trailer_ID[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* date time string *)
	str	:= ',"datetime":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.TimeStr[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* latitude string *)
	str	:= ',"latitude":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Lat[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* longitude string *)
	str	:= ',"longitude":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Lon[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* speed string *)
	str	:= ',"speed":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Speed[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overspeed string *)
	str	:= ',"overspeed":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Overspeed[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* payload raw string *)
	str	:= ',"payload_raw":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Payload_Raw[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* payload ema string *)
	str	:= ',"payload_ema":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Payload_EMA[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* overload string *)
	str	:= ',"overload":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Overload[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* pressure cylinder string *)
	str	:= ',"pressure_cyl":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Pressure_Cyl[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* pressure valve string *)
	str	:= ',"pressure_val":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Pressure_Val[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* strain left string *)
	str	:= ',"strain_left":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Strain_Left[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* strain right string *)
	str	:= ',"strain_right":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Strain_Right[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* fatigue event string *)
	str	:= ',"fatigue_event":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.EventCode[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* cycle duration string *)
	str	:= ',"cycle_duration":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Cycle_Duration[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	(* hydraulic efficiency string *)
	str	:= ',"hyd_efficiency":["';
	i := 1;
	WHILE i <= Get_Data.Data_Length DO
		CONCAT2(ADR(str), ADR(Get_Data.Hyd_Efficiency[i]), ADR(str), SIZEOF(str)); 
		
		IF i <> Get_Data.Data_Length THEN
			CONCAT2(ADR(str), ADR(valSeparator), ADR(str), SIZEOF(str));
		ELSE
			CONCAT2(ADR(str), ADR(arrayEnd), ADR(str), SIZEOF(str));
		END_IF
		
		i := i+1;
		
	END_WHILE
	
	CONCAT2(ADR(sPayloadPub), ADR(str), ADR(sPayloadPub), SIZEOF(sPayloadPub));
	
	CONCAT2(ADR(sPayloadPub), ADR(msgEnd), ADR(sPayloadPub), SIZEOF(sPayloadPub)); //message ending
	
	(* publish message to subscribed topic *)
	IF Publish := fbMqttClient.Publish(sTopic:= sTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE) THEN
		IF fbMqttClient.bError THEN
			// add your error logging here			
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		ELSE
			Published 	:= TRUE;
		END_IF
		
	END_IF
	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Send_Data">
      <LineId Id="914" Count="1" />
      <LineId Id="917" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="508" Count="15" />
      <LineId Id="960" Count="0" />
      <LineId Id="525" Count="13" />
      <LineId Id="540" Count="1" />
      <LineId Id="543" Count="6" />
      <LineId Id="866" Count="0" />
      <LineId Id="1007" Count="57" />
      <LineId Id="1163" Count="15" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1181" Count="15" />
      <LineId Id="1179" Count="1" />
      <LineId Id="1199" Count="15" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1215" Count="0" />
      <LineId Id="1217" Count="15" />
      <LineId Id="1216" Count="0" />
      <LineId Id="1233" Count="0" />
      <LineId Id="1235" Count="15" />
      <LineId Id="1234" Count="0" />
      <LineId Id="1251" Count="0" />
      <LineId Id="1253" Count="15" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1271" Count="15" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1289" Count="15" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1305" Count="0" />
      <LineId Id="1307" Count="15" />
      <LineId Id="1306" Count="0" />
      <LineId Id="1323" Count="0" />
      <LineId Id="1325" Count="15" />
      <LineId Id="1324" Count="0" />
      <LineId Id="1341" Count="0" />
      <LineId Id="1343" Count="15" />
      <LineId Id="1342" Count="0" />
      <LineId Id="1359" Count="0" />
      <LineId Id="1361" Count="15" />
      <LineId Id="1360" Count="0" />
      <LineId Id="1377" Count="0" />
      <LineId Id="1379" Count="15" />
      <LineId Id="1378" Count="0" />
      <LineId Id="1198" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1161" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="813" Count="2" />
      <LineId Id="912" Count="1" />
      <LineId Id="811" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>